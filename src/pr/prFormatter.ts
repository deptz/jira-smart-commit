import { PRContext } from './types';

/**
 * Format PR description in Bitbucket markdown format
 */
export function formatPRDescription(
  summary: string,
  changes: string,
  testing: string,
  impact: string,
  notes: string,
  context: PRContext
): string {
  const sections: string[] = [];
  
  // Add PR title suggestion as comment
  sections.push('<!-- Suggested PR Title: -->');
  sections.push(`<!-- ${generatePRTitle(context)} -->`);
  sections.push('');
  
  // Add all sections
  sections.push(summary);
  sections.push('');
  sections.push(changes);
  sections.push('');
  sections.push(testing);
  sections.push('');
  sections.push(impact);
  sections.push('');
  sections.push(notes);
  
  // Add footer with metadata
  sections.push('');
  sections.push('---');
  sections.push('');
  sections.push(`_Generated by JIRA Smart Commit • ${new Date().toISOString().split('T')[0]}_`);
  
  return sections.join('\n');
}

/**
 * Generate suggested PR title from context
 */
function generatePRTitle(context: PRContext): string {
  const parts: string[] = [];
  
  // Add JIRA key
  if (context.jiraKey) {
    parts.push(context.jiraKey);
  }
  
  // Add JIRA summary or generate from commits
  if (context.jiraIssue?.summary) {
    parts.push(context.jiraIssue.summary);
  } else if (context.commits.length > 0) {
    // Use first commit message
    const firstCommit = context.commits[0].message;
    const cleanMsg = firstCommit.replace(/^(\w+)(?:\([^)]*\))?[!]?:\s*/, '');
    parts.push(cleanMsg);
  }
  
  return parts.join(' - ');
}

/**
 * Format for GitHub PR (alternative)
 */
export function formatGitHubPR(
  summary: string,
  changes: string,
  testing: string,
  impact: string,
  notes: string,
  context: PRContext
): string {
  // GitHub uses same markdown format as Bitbucket
  return formatPRDescription(summary, changes, testing, impact, notes, context);
}

/**
 * Format for GitLab MR (alternative)
 */
export function formatGitLabMR(
  summary: string,
  changes: string,
  testing: string,
  impact: string,
  notes: string,
  context: PRContext
): string {
  // GitLab uses same markdown format as Bitbucket
  return formatPRDescription(summary, changes, testing, impact, notes, context);
}

/**
 * Convert PR description to plain text (for email/reports)
 */
export function formatPlainText(prDescription: string): string {
  // Remove markdown formatting
  let text = prDescription;
  
  // Remove HTML comments
  text = text.replace(/<!--[\s\S]*?-->/g, '');
  
  // Remove markdown headers
  text = text.replace(/#{1,6}\s+/g, '');
  
  // Remove markdown bold/italic
  text = text.replace(/[*_]{1,2}([^*_]+)[*_]{1,2}/g, '$1');
  
  // Remove markdown links but keep text
  text = text.replace(/\[([^\]]+)\]\([^)]+\)/g, '$1');
  
  // Remove markdown lists
  text = text.replace(/^\s*[-*+]\s+/gm, '• ');
  
  // Remove markdown code blocks
  text = text.replace(/```[\s\S]*?```/g, '');
  text = text.replace(/`([^`]+)`/g, '$1');
  
  // Clean up extra whitespace
  text = text.replace(/\n{3,}/g, '\n\n');
  
  return text.trim();
}

/**
 * Extract only the body (remove title suggestion and footer)
 */
export function extractPRBody(prDescription: string): string {
  let body = prDescription;
  
  // Remove HTML comments
  body = body.replace(/<!--[\s\S]*?-->/g, '');
  
  // Remove footer
  body = body.replace(/\n---\n[\s\S]*$/, '');
  
  return body.trim();
}

/**
 * Format PR for specific platform
 */
export function formatForPlatform(
  summary: string,
  changes: string,
  testing: string,
  impact: string,
  notes: string,
  context: PRContext,
  platform: 'bitbucket' | 'github' | 'gitlab' = 'bitbucket'
): string {
  switch (platform) {
    case 'github':
      return formatGitHubPR(summary, changes, testing, impact, notes, context);
    case 'gitlab':
      return formatGitLabMR(summary, changes, testing, impact, notes, context);
    case 'bitbucket':
    default:
      return formatPRDescription(summary, changes, testing, impact, notes, context);
  }
}
